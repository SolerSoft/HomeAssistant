blueprint:
  name: Motion Lights with Day and Night Brightness
  description: >
    Can turn on and off different lights and use different brightness levels based on the time of day.
  domain: automation
  source_url: https://github.com/SolerSoft/HomeAssistant/blob/main/blueprints/lights/motion-light-brightness.yaml
  input:
    # Motion that will trigger the automation
    binary_entity:
      name: "Motion or Occupancy"
      description: Binary sensor that turns lights on and off
      selector:
        entity:
          domain: binary_sensor
    # Lights to be controlled by the automation
    on_lights:
      name: "Activated Lights"
      description: Light entities that turn on when motion is detected
      default:
      selector:
        target:
          entity:
            domain: light
    off_lights:
      name: "Deactivated Lights"
      description: Light entities that turn off when motion stops
      default:
      selector:
        target:
          entity:
            domain: light
    # Ambient light sensors to prevent lights from turning on when it's already bright enough
    illuminance_sensor:
      name: "Illuminance Sensor"
      description: Optional illuminance sensor to prevent lights from turning on
      default:
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    # Maximum ambient light level (in lux) at which lights will still turn on
    maximum_luminance:
      name: Maximum Luminance
      description: >
        Lux threshold above which lights won't turn on (0 to disable)
      default: 0
      selector:
        number:
          min: 0
          max: 10000
          step: 1
    # How long to wait after motion stops before turning off lights
    no_motion_delay:
      name: Off Delay
      description: Seconds to wait after motion stops before turning lights off (0 for immediate)
      default: 0
      selector:
        number:
          min: 0
          max: 3600
          step: 1
          unit_of_measurement: seconds
    # Time when daytime mode begins
    day_start:
      name: Day Start Time
      description: Time when daytime begins
      default: "08:00:00"
      selector:
        time: {}
    # Brightness level for daytime operation (0-255)
    day_brightness:
      name: Day Brightness
      description: Brightness level (0–255) for daytime
      default: 255
      selector:
        number:
          min: 0
          max: 255
    # Time when nighttime mode begins
    night_start:
      name: Night Start Time
      description: Time when nighttime begins
      default: "22:30:00"
      selector:
        time: {}
    # Brightness level for nighttime operation (0-255)
    night_brightness:
      name: Night Brightness
      description: Brightness level (0–255) for nighttime
      default: 80
      selector:
        number:
          min: 0
          max: 255

  # Trigger when any motion sensor detects motion
  trigger:
    platform: state
    id: "binary_entity"
    entity_id: input.binary_entity
    to: "on"

  # Define variables used in the automation
  variables:
    # Make input variables available as script variables
    day_start: !input day_start
    day_brightness: !input day_brightness
    night_start: !input night_start
    night_brightness: !input night_brightness
    illuminance_sensor: !input illuminance_sensor
    maximum_luminance: !input maximum_luminance
    # Calculate if we're in daytime (between day_start and night_start)
    is_daytime: >
      {% set now = now().time() %}
      {% set ds = strptime(day_start, "%H:%M:%S").time() %}
      {% set ns = strptime(night_start, "%H:%M:%S").time() %}
      {{ ds <= now < ns }}
    # Calculate the current brightness based on time of day
    current_brightness: "{{ day_brightness if is_daytime else night_brightness }}"
    # Check if light level is acceptable (if sensor is configured)
    light_level_ok: >
      {% if illuminance_sensor is not none and maximum_luminance | int > 0 %}
        {{ states(illuminance_sensor) | float <= maximum_luminance | float }}
      {% else %}
        true
      {% endif %}

  # Check if light level is acceptable before proceeding
  condition:
    - condition: template
      value_template: "{{ light_level_ok }}"

  action:
    # Turn on lights with appropriate brightness
    - service: light.turn_on
      target: !input on_lights
      data:
        brightness: "{{ current_brightness }}"

    # Wait for motion to stop and delay period to expire
    - wait_for_trigger:
        - platform: state
          entity_id: !input binary_entity
          to: "off"
    - delay: !input no_motion_delay

    # Turn off lights
    - service: light.turn_off
      target: !input off_lights
