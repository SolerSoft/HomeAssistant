blueprint:
  name: Multi-Motion Activated Light
  description: >
    Turns on lights when motion is detected and off after a delay,
    using day/night brightness levels, but only if ambient illuminance is below a configured threshold.
  domain: automation
  input:
    # Motion sensors that will trigger the automation
    motion_sensors:
      name: Motion/Occupancy Sensors
      description: Motion or occupancy sensors that turn lights on and off
      selector:
        target:
          entity:
            domain: binary_sensor
            device_class:
              - motion
              - occupancy
    # Lights to be controlled by the automation
    on_lights:
      name: Motion-Activated Lights
      description: Light entities that turn on when motion is detected
      selector:
        target:
          entity:
            domain: light
    off_lights:
      name: Motion-Deactivated Lights
      description: Light entities that turn off when motion stops
      selector:
        target:
          entity:
            domain: light
    # Ambient light sensors to prevent lights from turning on when it's already bright enough
    illuminance_sensors:
      name: Illuminance Sensors
      description: Optional light sensors to prevent lights from turning on
      selector:
        target:
          entity:
            domain: sensor
            device_class: illuminance
    # Maximum ambient light level (in lux) at which lights will still turn on
    maximum_luminance:
      name: Maximum Luminance
      description: >
        Lux threshold above which lights won't turn on (0 to disable)
      default: 0
      selector:
        number:
          min: 0
          max: 10000
          step: 1
    # How long to wait after motion stops before turning off lights
    off_delay:
      name: Off Delay
      description: Minutes to wait after motion stops before turning lights off (0 for immediate)
      default: 2
      selector:
        number:
          min: 0
          max: 60
          step: 1
          unit_of_measurement: min
    # Time when daytime mode begins
    day_start:
      name: Day Start Time
      description: Time when daytime begins
      default: "08:00:00"
      selector:
        time: {}
    # Brightness level for daytime operation (0-255)
    day_brightness:
      name: Day Brightness
      description: Brightness level (0–255) for daytime
      default: 255
      selector:
        number:
          min: 0
          max: 255
    # Time when nighttime mode begins
    night_start:
      name: Night Start Time
      description: Time when nighttime begins
      default: "22:30:00"
      selector:
        time: {}
    # Brightness level for nighttime operation (0-255)
    night_brightness:
      name: Night Brightness
      description: Brightness level (0–255) for nighttime
      default: 80
      selector:
        number:
          min: 0
          max: 255

# Trigger when any motion sensor detects motion
trigger:
  - platform: state
    entity_id: >-
      {{ expand(input.motion_sensors.target) | map(attribute='entity_id') | list }}
    to: "on"

action:
  - choose:
      - conditions:
          # Check if current time is between day_start and night_start
          - condition: template
            value_template: >
              {% set now = now().time() %}
              {% set ds = strptime(input.day_start, "%H:%M:%S").time() %}
              {% set ns = strptime(input.night_start, "%H:%M:%S").time() %}
              {{ ds <= now < ns }}
          # Check if ambient light is below threshold (if configured)
          - condition: template
            value_template: >
              {% if expand(input.illuminance_sensors) | length > 0 and input.maximum_luminance | int > 0 %}
                {{ expand(input.illuminance_sensors)
                   | map(attribute='state')
                   | map('float')
                   | max < input.maximum_luminance | float }}
              {% else %}
                true
              {% endif %}
        sequence:
          # Turn on lights with daytime brightness
          - service: light.turn_on
            target: !input on_lights
            data:
              brightness: !input day_brightness
      - conditions:
          # Check if current time is between night_start and day_start (overnight)
          - condition: template
            value_template: >
              {% set now = now().time() %}
              {% set ds = strptime(input.day_start, "%H:%M:%S").time() %}
              {% set ns = strptime(input.night_start, "%H:%M:%S").time() %}
              {{ now >= ns or now < ds }}
          # Check if ambient light is below threshold (if configured)
          - condition: template
            value_template: >
              {% if expand(input.illuminance_sensors) | length > 0 and input.maximum_luminance | int > 0 %}
                {{ expand(input.illuminance_sensors)
                   | map(attribute='state')
                   | map('float')
                   | max < input.maximum_luminance | float }}
              {% else %}
                true
              {% endif %}
        sequence:
          # Turn on lights with nighttime brightness
          - service: light.turn_on
            target: !input on_lights
            data:
              brightness: !input night_brightness
  # Wait for motion to stop and delay period to expire
  - wait_for_trigger:
      - platform: state
        entity_id: !input motion_sensors
        to: "off"
        for:
          minutes: !input off_delay
    continue_on_timeout: false
  # Turn off lights if all motion sensors are off
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ expand(input.motion_sensors)
                 | map(attribute='state')
                 | list
                 | select('equalto', 'off')
                 | list
                 | length == expand(input.motion_sensors) | length }}
        sequence:
          - service: light.turn_off
            target: !input off_lights
